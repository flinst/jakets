"use strict";
const Path = require("path");
const Util = require("./Util");
const Jake = require("./Jake");
const Command_1 = require("./Command");
let RawExec = Util.CreateNodeExec("browserify", "browserify --help", "browserify/bin/cmd.js");
let Tsify = "tsify";
Tsify = Util.FindModulePath(Tsify) || Tsify;
let Collapser = "bundle-collapser/plugin.js";
Collapser = Util.FindModulePath(Collapser) || Collapser;
function Exec(inputs, output, callback, isRelease, tsargs, options, isSilent) {
    let args = inputs;
    if (tsargs !== null) {
        args += " -p [ " + Tsify + " --global " + (tsargs || "") + " ]";
    }
    if (isRelease) {
        args += "  -p [ " + Collapser + " ]";
    }
    else {
        args += " --debug";
    }
    args += " --outfile " + output;
    if (options) {
        args += " " + options;
    }
    Jake.Shell.mkdir("-p", Path.dirname(output));
    RawExec(args, callback, isSilent);
}
exports.Exec = Exec;
function BrowserifyTask(name, dependencies, output, inputs, isRelease, tsargs, options) {
    let depInfo = new Command_1.CommandInfo({
        Name: name,
        Dir: Path.resolve(Util.LocalDir),
        Output: output,
        Inputs: inputs,
        IsRelease: isRelease,
        Tsargs: tsargs,
        Options: options,
        Dependencies: dependencies
    });
    file(depInfo.DependencyFile, depInfo.AllDependencies, function () {
        Exec(inputs, output, (error, stdout, stderror) => {
            Command_1.ExtractFilesAndUpdateDependencyInfo(depInfo, error, stdout, stderror);
            this.complete();
            Jake.LogTask(this, 2);
        }, isRelease, tsargs, (options || "") + " --list", true);
    }, { async: true });
    file(output, [depInfo.DependencyFile], function () {
        Exec(inputs, output, () => {
            this.complete();
            Jake.LogTask(this, 2);
        }, isRelease, tsargs, options);
    }, { async: true });
    return output;
}
exports.BrowserifyTask = BrowserifyTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJvd3NlcmlmeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJyb3dzZXJpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLHVDQUE2RTtBQUU3RSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUMvQixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLHVCQUF1QixDQUN4QixDQUFDO0FBRUYsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUU1QyxJQUFJLFNBQVMsR0FBRyw0QkFBNEIsQ0FBQztBQUM3QyxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUM7QUFFeEQsY0FBcUIsTUFBYyxFQUFFLE1BQWMsRUFBRSxRQUFRLEVBQUUsU0FBbUIsRUFBRSxNQUFlLEVBQUUsT0FBZ0IsRUFBRSxRQUFrQjtJQUN2SSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUM7SUFDbEIsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxJQUFJLFFBQVEsR0FBRyxLQUFLLEdBQUcsWUFBWSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNsRSxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksSUFBSSxTQUFTLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN2QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFJLElBQUksVUFBVSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxJQUFJLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUMvQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1osSUFBSSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFN0MsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQWxCRCxvQkFrQkM7QUFFRCx3QkFDRSxJQUFZLEVBQ1YsWUFBc0IsRUFDdEIsTUFBYyxFQUNkLE1BQWMsRUFDZCxTQUFtQixFQUNuQixNQUFlLEVBQ2YsT0FBZ0I7SUFFbEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxxQkFBVyxDQUFDO1FBQzVCLElBQUksRUFBRSxJQUFJO1FBQ1YsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxNQUFNLEVBQUUsTUFBTTtRQUNkLE1BQU0sRUFBRSxNQUFNO1FBQ2QsU0FBUyxFQUFFLFNBQVM7UUFDcEIsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsT0FBTztRQUNoQixZQUFZLEVBQUUsWUFBWTtLQUMzQixDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsZUFBZSxFQUFFO1FBQ3BELElBQUksQ0FDRixNQUFNLEVBQ0osTUFBTSxFQUNOLENBQUMsS0FBSyxFQUFFLE1BQWMsRUFBRSxRQUFRO1lBQ2hDLDZDQUFtQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLEVBQ0MsU0FBUyxFQUNULE1BQU0sRUFDTixDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQzNCLElBQUksQ0FDUCxDQUFDO0lBQ0osQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUNyQyxJQUFJLENBQ0YsTUFBTSxFQUNKLE1BQU0sRUFDTjtZQUNBLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLEVBQ0MsU0FBUyxFQUNULE1BQU0sRUFDTixPQUFPLENBQ1YsQ0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXBCLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQW5ERCx3Q0FtREMifQ==